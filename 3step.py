import pygame
import time
import cv2
import mediapipe as mp

# Initialize pygame mixer
pygame.mixer.init()

# Define a function to play sound
def play_sound(sound_file):
    # Load a sound (make sure to provide a valid path to a sound file on your system)
    sound = pygame.mixer.Sound(sound_file)  # Use the corresponding sound file
    sound.play()

# Define the area to check (example values)
y_min = 200  # Minimum y value of the ankle area
y_max = 330  # Maximum y value of the ankle area

# Group 1: Coordinates for Staircase 1
ankle_data_staircase1 = [
        (281, 282), (281, 282), (282, 281), (282, 281), (282, 281), (282, 281), (282, 280), (281, 279), (281, 279), (282, 280), (282, 280), (282, 280), (281, 280), (281, 280), (281, 280), (281, 280), (281, 280), (281, 281), (280, 280), (280, 280), (280, 280), (280, 280), (280, 280), (280, 280), (280, 280), (280, 280), (280, 280), (280, 280), (280, 279), (280, 279), (280, 279), (280, 279), (280, 279), (280, 279), (279, 279), (279, 279), (279, 280), (279, 280), (280, 281), (280, 281), (280, 281), (280, 281), (280, 281), (280, 281), (280, 283), (280, 283), (280, 282), (280, 282), (280, 282), (280, 282), (280, 282), (280, 282), (280, 282), (280, 282), (281, 282), (280, 281), (280, 281), (280, 280), (280, 280), (280, 280), (281, 281), (281, 281), (281, 280), (281, 281), (281, 280), (281, 280), (281, 280), (282, 280), (282, 280), (281, 280), (281, 281), (281, 281), (281, 281), (281, 281), (281, 282), (282, 283), (283, 283), (283, 283), (283, 283), (282, 282), (283, 282), (282, 280), (282, 280), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 282), (282, 282), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (282, 281), (281, 281), (281, 281), (282, 281), (282, 282), (282, 282), (282, 282), (282, 282), (282, 282), (282, 282), (282, 282), (282, 282), (282, 281), (282, 281), (282, 282), (282, 281), (282, 281), (282, 281), (282, 281), (281, 281), (281, 281), (281, 282), (281, 281), (281, 281), (281, 281), (281, 281), (281, 281), (281, 281), (281, 281), (281, 281), (281, 281), (281, 281), (281, 280), (281, 280), (280, 280), (280, 280), (280, 280), (280, 280), (279, 280), (280, 280), (280, 280), (280, 280), (280, 281), (280, 281), (281, 281), (281, 282), (281, 282), (281, 282), (281, 282), (281, 282), (281, 282), (282, 282)
]

# Group 2: Coordinates for Staircase 2
ankle_data_staircase2 = [
(289, 288), (289, 288), (289, 288), (288, 288), (288, 288), (288, 288), (288, 287), (288, 288), (288, 288), (289, 288), (289, 288), (289, 288), (290, 288), (290, 288), (290, 288), (289, 288), (289, 288), (289, 288), (289, 288), (288, 288), (288, 288), (288, 288), (287, 287), (287, 288), (288, 288), (288, 289), (288, 289), (289, 289), (289, 289), (289, 290), (289, 290), (290, 290), (290, 290), (290, 290), (290, 290), (290, 290), (290, 290), (290, 289), (290, 289), (289, 289), (290, 288), (289, 288), (289, 288), (289, 288), (289, 288), (289, 288), (289, 287), (289, 287), (289, 287), (289, 288), (289, 289), (289, 289), (290, 289), (290, 288), (290, 289), (290, 289), (290, 289), (290, 287), (289, 288), (289, 287), (288, 287), (288, 287), (289, 287), (289, 287), (289, 288), (289, 288), (290, 289), (290, 289), (291, 289), (291, 289), (291, 289), (290, 289), (290, 289), (290, 288), (290, 287), (290, 286), (290, 286), (290, 287), (290, 287), (290, 287), (290, 287), (290, 287), (290, 287), (290, 288), (290, 287), (290, 287), (289, 287), (289, 287), (290, 287), (290, 289), (289, 287), (289, 287), (290, 288), (290, 288), (290, 288), (290, 288), (290, 288), (290, 290), (290, 290), (290, 290), (290, 290), (290, 289), (290, 289), (290, 288), (290, 288), (290, 288), (289, 287), (289, 288), (288, 288), (288, 288), (289, 288), (289, 287), (289, 287), (289, 287), (289, 288), (289, 288), (290, 288), (290, 288), (289, 288), (288, 287), (288, 288), (288, 287), (287, 287), (287, 287), (288, 287), (288, 287), (288, 287), (288, 287), (288, 287), (287, 287), (287, 287), (287, 287), (287, 288), (288, 288), (288, 288), (288, 288), (288, 288), (288, 288), (288, 288), (287, 288), (287, 288), (288, 290), (288, 290), (288, 290), (288, 289), (288, 289), (289, 288), (289, 288), (289, 287), (289, 287), (289, 287), (289, 286), (289, 287), (289, 287), (290, 287), (289, 288), (289, 287), (289, 287), (289, 288), (290, 288), (290, 289), (290, 290), (290, 290), (289, 290), (287, 290), (286, 290), (287, 292), (287, 292), (289, 292), (289, 290), (288, 291), (288, 290), (287, 291), (287, 291), (287, 291)
]

# Group 3: Coordinates for Staircase 3
ankle_data_staircase3 = [
(292, 296), (294, 296), (295, 296), (295, 295), (295, 295), (296, 296), (296, 296), (295, 296), (296, 296), (295, 296), (296, 296), (297, 297), (298, 298), (297, 298), (297, 298), (297, 297), (298, 296), (297, 296), (298, 296), (298, 296), (298, 297), (298, 297), (298, 296), (298, 296), (298, 296), (297, 296), (297, 296), (297, 296), (297, 296), (296, 295), (296, 295), (296, 295), (296, 295), (296, 295), (295, 295), (295, 294), (295, 295), (295, 295), (295, 295), (296, 295), (295, 295), (297, 295), (297, 295), (297, 295), (296, 296), (296, 296), (296, 296), (295, 296), (295, 296), (295, 296), (296, 296), (296, 296), (296, 296), (297, 297), (297, 297), (297, 297), (297, 297), (296, 297), (297, 297), (297, 297), (297, 297), (297, 297), (296, 296), (296, 296), (295, 294), (295, 294), (295, 294), (295, 294), (295, 294), (295, 294), (294, 294), (294, 293), (294, 293), (295, 293), (295, 295), (296, 295), (297, 296), (297, 298), (300, 304), (301, 305), (301, 303), (301, 303), (300, 303), (301, 305), (301, 305), (301, 305), (301, 305), (302, 305)
]


ankle_data_staircase4 = [
(295, 296), (299, 297), (300, 299), (301, 300), (301, 300), (302, 300), (302, 300), (302, 301), (302, 300), (302, 301), (302, 302), (302, 302), (302, 302), (302, 302), (302, 301), (302, 300), (302, 300), (302, 300), (301, 300), (301, 300), (301, 300), (301, 300), (301, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 301), (301, 300), (301, 300), (301, 300), (302, 301), (302, 301), (302, 301), (302, 302), (302, 301), (302, 301), (302, 302), (302, 302), (302, 302), (302, 301), (302, 301), (302, 301), (302, 301), (302, 300), (302, 300), (302, 300), (302, 301), (302, 301), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (301, 300), (301, 301), (302, 301), (301, 301), (301, 302), (301, 302), (301, 302), (301, 302), (301, 301), (301, 301), (301, 301), (301, 301), (301, 300), (301, 300), (301, 300), (301, 300), (301, 300), (301, 300), (301, 300), (301, 300), (301, 299), (301, 300), (301, 300), (302, 300), (302, 300), (302, 300), (302, 299), (302, 299), (301, 299), (302, 300), (302, 300), (302, 301), (302, 301), (302, 301), (303, 300), (303, 300), (303, 300), (303, 299), (303, 299), (303, 299), (303, 298), (302, 298), (302, 298), (302, 298), (302, 298), (302, 298), (302, 297), (302, 297), (302, 297), (302, 297), (302, 298), (302, 298), (302, 298), (302, 298), (302, 298), (302, 298), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 299), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 301), (302, 301), (302, 301), (302, 301), (302, 300), (302, 300), (302, 300), (302, 300), (303, 300), (303, 300), (303, 300), (303, 300), (303, 300), (303, 300), (302, 300), (302, 300), (302, 300), (302, 300), (303, 300), (302, 299), (302, 300), (303, 300), (303, 300), (303, 300), (302, 300), (302, 300), (302, 301), (302, 301), (302, 301), (302, 301), (302, 301), (302, 299), (303, 301), (303, 300), (303, 300), (303, 300), (303, 300), (303, 300), (302, 299), (302, 299), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (303, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (303, 300), (303, 300), (303, 300), (303, 300), (303, 300), (303, 300), (302, 299), (303, 300), (303, 300), (303, 299), (302, 300), (302, 300), (302, 300), (303, 301), (303, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 300), (302, 299), (302, 299), (302, 299), (302, 299), (302, 300), (302, 300) ]

ankle_data_staircase5 = [
(311, 307), (311, 308), (311, 308), (312, 311), (313, 311), (313, 312), (313, 311), (314, 312), (314, 312), (313, 312), (313, 312), (314, 311), (313, 311), (313, 311), (313, 310), (313, 310), (313, 310), (313, 309), (313, 309), (313, 309), (314, 309), (314, 310), (314, 310), (315, 311), (315, 312), (315, 312), (315, 312), (315, 312), (315, 312), (315, 312), (315, 312), (315, 312), (316, 312), (315, 312), (315, 312), (314, 311), (314, 311), (314, 311), (314, 310), (315, 311), (315, 311), (315, 311), (315, 310), (314, 309), (314, 309), (314, 309), (314, 309), (314, 309), (314, 311), (315, 310), (315, 310), (315, 310), (313, 310), (313, 309), (313, 310), (314, 310), (314, 310), (314, 310), (314, 310), (314, 310), (314, 310), (314, 310), (314, 310), (312, 310), (312, 310), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (310, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (310, 309), (311, 309), (311, 309), (310, 309), (310, 309), (311, 309), (310, 309), (311, 309), (311, 309), (311, 308), (312, 308), (311, 308), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 310), (311, 310), (311, 309), (311, 310), (311, 310), (311, 310), (311, 310), (312, 310), (312, 310), (311, 308), (310, 307), (309, 307), (310, 308), (310, 310), (310, 310), (310, 310), (311, 310), (311, 310), (311, 310), (311, 311), (311, 310), (310, 310), (310, 309), (310, 309), (310, 309), (310, 309), (310, 309), (310, 309), (309, 309), (310, 308), (310, 308), (310, 308), (310, 308), (309, 308), (310, 308), (310, 309), (310, 309), (310, 309), (310, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (310, 308), (310, 308), (310, 308), (310, 308), (311, 308), (310, 308), (310, 308), (310, 308), (310, 308), (310, 308), (310, 308), (309, 307), (311, 309), (311, 309), (311, 309), (311, 309), (311, 309), (311, 308), (311, 308), (311, 308), (311, 308), (311, 308), (311, 308), (311, 308), (311, 308), (310, 308), (310, 307), (310, 307), (310, 307), (310, 307), (310, 308), (310, 308), (310, 308), (310, 308), (310, 307), (310, 307), (310, 307), (310, 308), (310, 308), (310, 308), (309, 307), (309, 307), (310, 307), (310, 307), (310, 307), (310, 307), (310, 307), (310, 308), (310, 308), (310, 307), (310, 307), (310, 307), (310, 307), (310, 307), (310, 307), (310, 307), (310, 307), (310, 307), (309, 307), (309, 307), (309, 307), (309, 307), (309, 307), (309, 307), (309, 307), (309, 307), (309, 307), (309, 307)
        ]


# List of groups with their corresponding sounds
ankle_groups = [
    {'coordinates': ankle_data_staircase1, 'sound': 'a4.mp3'},  # Replace with your sound file paths
    {'coordinates': ankle_data_staircase2, 'sound': 'b4.mp3'},
    {'coordinates': ankle_data_staircase3, 'sound': 'c4.mp3'},
    {'coordinates': ankle_data_staircase4, 'sound': 'd4.mp3'},
    {'coordinates': ankle_data_staircase5, 'sound': 'e4.mp3'}
]

# Initialize MediaPipe Pose model
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)
mp_drawing = mp.solutions.drawing_utils

# Set up webcam
cap = cv2.VideoCapture(2)

# Main loop to capture frames and process them
while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame.")
        break

    # Convert the frame to RGB for Mediapipe
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the frame with the Pose model
    results = pose.process(rgb_frame)

    # Check if landmarks were detected
    if results.pose_landmarks:
        # Draw the pose landmarks on the frame (optional, for visualization)
        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        # Get the y-coordinates of the left and right ankles (Landmarks 29 and 30 for left and right ankles)
        left_ankle = results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ANKLE]
        right_ankle = results.pose_landmarks.landmark[mp_pose.PoseLandmark.RIGHT_ANKLE]

        # Convert normalized coordinates to pixel coordinates
        height, width, _ = frame.shape
        left_ankle_y = int(left_ankle.y * height)
        right_ankle_y = int(right_ankle.y * height)

        # Print ankle coordinates (optional)
        print(f"Left ankle y: {left_ankle_y}, Right ankle y: {right_ankle_y}")

        # Check if both ankles' y-values are within the defined area
        if y_min <= left_ankle_y <= y_max and y_min <= right_ankle_y <= y_max:
            # Check each group of ankle coordinates to see if there's a match
            for group in ankle_groups:
                if (left_ankle_y, right_ankle_y) in group['coordinates']:
                    print(f"Ankle coordinates match for {group['sound']}! Playing sound.")
                    play_sound(group['sound'])
                    time.sleep(1)  # Wait 1 second before checking the next values

    # Display the captured frame in a window (optional)
    cv2.imshow("Webcam", frame)

    # Exit loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close OpenCV windows
cap.release()
cv2.destroyAllWindows()
